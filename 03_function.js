//////////////////////////////// 함수 ////////////////////////////////
//함수 생성 방법 3가지: 함수 선언문, 함수 표현식, Function() 생성자 함수
//[함수 리터럴]
//함수명은 선택사항. 없다면 익명 함수
//매개 변수 작성시 타입 기술 X


//1. 함수 선언문
//반드시 함수명이 정의 되어 있어야 한다.
function add(x,y) {
    return x + y;
}

console.log(add(3,4));

//2. 함수 표현식
//javascript에서는 함수도 하나의 값처럼 취급 (일급 객체라 함) -> 따라서 함수도 숫자나 문자열처럼 변수에 할당 가능
//즉, 함수 리터럴로 함수를 만들고, 생성된 함수를 변수에 할당하여 생성
//여기서 함수 리터럴로 생성한 함수는 함수명이 없으므로 익명 함수이다.

var add = function (x, y) {
    return x + y;
};
var plus = add;

console.log(add(3,4));
console.log(plus(5,6));

//함수 이름은 재귀적 호출 처리 가능
var factorialVar = function factorial(n) {
    if(n<=1) {
        return 1;
    }
    return n*factorial(n-1);
};

console.log(factorialVar(3));
//console.log(factorial(3));      //ERROR



//3. Function() 생성자 함수
var add = new Function('x', 'y', 'return x + y');
console.log(add(3,4));




//////////////////////////////// 함수 객체: 함수도 객체다 ////////////////////////////////
//함수 자체가 일반 객체처럼 프로퍼티들을 가질 수 있다.

function add(x, y) {
    return x+y;
}
add.result = add(3,2);      //result 프로퍼티 동적 생성
add.status = 'OK';          //status 프로퍼티 동적 생성

console.log(add.result);
console.log(add.status);

//함수도 일반 객체처럼 취급할 수 있다.  ->  일급 객체
//1. 리터럴에 의해 생성
//2. 변수나 배열의 요소, 객체의 프로퍼티 등에 할당 가능
//3. 함수의 인자로 전달 가능
//4. 함수의 리턴값으로 리턴 가능
//5. 동적으로 프로퍼티를 생성 및 할당 가능
//이러한 일급 객체의 특성으로 "함수형 프로그래밍"이 가능





//////////////////////////////// 함수의 다양한 형태 ////////////////////////////////

//콜백 함수
//어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출되는 함수
//또한, 특정 함수의 인자로 넘겨서, 코드 내부에서 호출되는 함수

// 즉시 실행 함수
//최초 한 번의 실행만을 필요로 하는 초기화 코드 부분 등에 사용
(function (name) {
    console.log('This is the immediate function -> ' + name);
})('foo');


//내부 함수
//내부 함수는 자신을 둘러싼 외부 함수의 변수에 접근 가능
//클로저를 생성하거나 부모 함수 코드에서 외부에서의 접근을 막고 독립적인 헬퍼 함수를 구현하는 용도로 사용